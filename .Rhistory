india_map<-read_sf("G:/Research data/Other groups/R shiny app for Indian Ecoregions/shapefiles/INDIA_region.shp",crs=4326)
## Libraries used
library(readxl)
library(tidyverse)
require(sp)
library(sf)
require(rgdal)
require (leaflet)
# Data path
data_path<-"G:/Research data/Other groups/R shiny app for Indian Ecoregions/sample_points.xlsx"
# Import data
loc<-read_excel(data_path,
sheet=1)
# India map with states
india_map<-read_sf("G:/Research data/Other groups/R shiny app for Indian Ecoregions/shapefiles/INDIA_region.shp",crs=4326)
# a 'SpatialPolygonsDataFrame' object is created after importing the shapefile in R which can be confirmed using the function 'class'
class(india_map)
#plot(india_map$geometry)
# Eco-regions shapefile
ecoregions<-read_sf("G:/Research data/Other groups/R shiny app for Indian Ecoregions/shapefiles/Ecoregions2017/Ecoregions2017.shp",
crs=4326)
table(ecoregions$ECO_NAME)
table(ecoregions$BIOME_NAME)
table(ecoregions$REALM)
# # Visualizing the map using base R graphics
#
# plot(india_map$geometry,
#      col = "grey",# fill for the map
#      border = "black") # border colors
#
# title(main = "States map of India") # title for the map
#
# box() # bounding box for the map
#Importing GIS data of the samples
# Data points to be mapped must also be converted into a Spatialpolygondataframe object
# The names of the field for the Latitude and Longitude are as per the specific dataset, though, the order should not change. The **CRS** should be the same as used for the map.
# converting the data into a spatialdataframe object using sp package.
coordinates<-loc[,c("Longitude","Latitude")]
sampling_points<-SpatialPointsDataFrame(coords = coordinates,
data = coordinates,
proj4string = CRS("+proj=longlat +datum=WGS84"))
sampling_points<-st_as_sf(sampling_points,crs=4326)
class(sampling_points)
# Combining the information from the shapefile for the GIS points
sf_use_s2(FALSE) # turns off spherical geometry
ovr <- st_intersection(ecoregions,
sampling_points)%>%
data.frame(.)
View(ovr)
str(ovr)
#write.csv(ovr,'shp_file_data.csv')
getwd()
# Crop the geotiff (cutting the raster file based on the extent of the shapefile)
cropped_data <-st_crop(ecoregions,
india_map)
plot(cropped_data$geometry)
table(cropped_data$ECO_NAME)
st_write(cropped_data, "Indian_ecoregions.shp")
getwd()
runApp()
runApp()
runApp()
gc()
gc()
gc()
gc()
runApp('G:/Research data/Other groups/R shiny app for Indian Ecoregions/map_updated_25-05-23.R')
runApp()
runApp('G:/Research data/Other groups/R shiny app for Indian Ecoregions/map_updated_25-05-23.R')
gc()
gc()
runApp('G:/Research data/Other groups/R shiny app for Indian Ecoregions/map_updated_25-05-23.R')
shiny::runApp()
runApp()
gc()
gc()
shiny::runApp()
shiny::runApp()
gc()
shiny::runApp()
runApp()
gc()
gc()
shiny::runApp()
shiny::runApp()
runApp('G:/Research data/Other groups/R shiny app for Indian Ecoregions/second iteration 19-06-23.R')
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
radioButtons("controller", "Controller", 1:3, 1)
),
mainPanel(
tabsetPanel(
id = "hidden_tabs",
# Hide the tab values.
# Can only switch tabs by using `updateTabsetPanel()`
type = "hidden",
tabPanelBody("panel1", "Panel 1 content"),
tabPanelBody("panel2", "Panel 2 content"),
tabPanelBody("panel3", "Panel 3 content")
)
)
)
)
server <- function(input, output, session) {
observeEvent(input$controller, {
updateTabsetPanel(session, "hidden_tabs", selected = paste0("panel", input$controller))
})
}
if (interactive()) {
shinyApp(ui, server)
}
#### R Shiny app for extracting ecoregion and biome information for any Indian location ####
# Libraries used
require(shiny)
require(tidyverse)
require(sp)
require(sf)
require(leaflet)
require(shinythemes)
require(DT)
require(bslib)
require(thematic)
require(RColorBrewer)
require(webshot)
require(mapview)
require(htmltools)
library(randomcoloR)
library(janitor)
# Install this once on the machine to save the leaflet plots
webshot::install_phantomjs(force = TRUE)
# Convert all GIS based data into planar representations
sf_use_s2(FALSE)
# Define UI for data upload app
ui<-navbarPage(
theme = shinytheme("cerulean"),
collapsible = TRUE,
title = "FreshEcoDExt",
## Changes the font size of the navbar titles (navbar-brand) and tabpanels (navbar-static-top)
tags$style(type = 'text/css', "
.navbar.navbar-default.navbar-static-top{font-size: 18px;}
.navbar-default .navbar-brand {font-size: 26px;} "
),
tabPanel(tabsetPanel(
"Read Me",
fluidRow(
column(12,
align = 'center',
tags$h2(class = 'heading text-center',
style = "color:steelblue",
'What are Freshwater Ecoregions?'),
p(h5("'An ecoregion (ecological region) is an ecologically and geographically defined area that is smaller than a bioregion, which in turn is smaller than a biogeographic realm. Ecoregions cover relatively large areas of land or water, and contain characteristic, geographically distinct assemblages of natural communities and species."),
style = "color:steelblue"),
p(h5("'A freshwater ecoregion is a large area encompassing one or more freshwater systems that contains a distinct assemblage of natural freshwater communities and species. The freshwater species, dynamics, and environmental conditions within a given ecoregion are more similar to each other than to those of surrounding ecoregions and together form a conservation unit.'(Wikipedia).",
align = 'center'),
style = "color:steelblue"),
tags$a(href="https://www.feow.org/",
p("Click here to read more on Freshwater Ecoregions",
align='center')),
tags$h3(class = 'heading text-center',
style = "color:steelblue",
'What does FreshEcoDExt do?'),
p(h5("FreshEcoDExt (Freshwater Ecoregions Data Extraction and visualization Tool) is an app designed for extracting, transforming, visualizing and downloading information on freshwater ecoregions of the world. It builds upon the FEOW data/maps that are available on their webpage thereby giving more customized visualizations based on the user data.",
align = 'center'),
style = "color:steelblue"),
)
),
# fluidRow(
#   column(12,img(src="G:/Research data/Other groups/R shiny app for Indian Ecoregions/world_fresheco.jpg")
#   )
# ),
fluidRow(column(12,
align = 'center',
tags$h4(p("Data Input Format",
align='center')),
tableOutput("sample_data")
)
),
fluidRow(column(12,
align = 'center',
tags$a(href="https://github.com/sameerpadhye/Ecoregions-and-Biomes-of-India--R-Shiny-app-/blob/main/readme.docx",
p("How to use the app?",
align='center')),
tags$div(
"Created by: ",
tags$a(href="https://sameermpadhye.wixsite.com/website",
"Sameer M. Padhye"),
tags$img(src = "Biologia Logo n.jpg",
align = "center")
),
p(h6("Made with", a("Shiny",
href = "https://shiny.posit.co/")
)
)
)
)
)
),
tabPanel("Data Input",
fluidRow(column(12,
align = 'center',
fileInput("file1",
h4("Choose Input File (.csv)"),
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv")
)
)
),
HTML('<center><img src="world_fresheco.jpg" width="100%"></center>')
),
tabPanel("Map",
fluidRow(column(width = 12,
align="center",
downloadButton("download2",
"Download Map"),
downloadButton("download_shp",
"Download Shapefile")
)
),
fluidRow(column(width = 12,
leafletOutput("plot1",
height = 750)))
),
tabPanel("Table",
br(),
fluidRow(column(width=12,
align="center",
DT::dataTableOutput("table1",
width = '100%',
height = '100%'))),
fluidRow(column(width = 12,
align="center",
downloadButton("download", "Download Table")
)
)
),
tabPanel("Heatmap",
plotOutput("heatmap",
width=1250,
height=700)
)
)
library(shiny)
library(lubridate)
library(shinydashboard)
library(shiny)
library(lubridate)
library(shinydashboard)
install.packages("shinydashboard")
library(shiny)
library(lubridate)
library(shinydashboard)
ui <- shinyUI(
fluidPage(
tags$head(
tags$style(HTML(
"
.navbar-header { width: 10% }
.navbar-nav { width: 90% }
.navbar-nav>li:nth-child(2) { float: right; }"))),
navbarPage("Navbar!",
tabPanel("Plot",
sidebarLayout(
sidebarPanel(
textInput("value", "value", 3)
),
mainPanel()
)
),
tabPanel(
uiOutput("messagesUI")
)
)
)
)
server <- function(input, output, session) {
output$messagesUI <- renderUI({
if(input$value > 3){
dropdownMenu(type = "messages",
messageItem(
from = "Sales Dept",
message = "Sales are steady this month.")
)
}
})
}
shinyApp(ui = ui, server = server)
gc()
gc()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
freshwater_eco<-read_sf("G:/Research data/Other groups/R shiny app for Indian Ecoregions/India_world_freshwaterreg_shapefiles/Freshwater_Ecoregions.shp")
freshwater_eco<-st_transform(freshwater_eco,4326)
require(shiny)
require(tidyverse)
require(sp)
require(sf)
require(leaflet)
require(shinythemes)
require(DT)
require(bslib)
require(thematic)
require(RColorBrewer)
require(webshot)
require(mapview)
require(htmltools)
library(randomcoloR)
library(janitor)
freshwater_eco<-read_sf("G:/Research data/Other groups/R shiny app for Indian Ecoregions/India_world_freshwaterreg_shapefiles/Freshwater_Ecoregions.shp")
freshwater_eco<-st_transform(freshwater_eco,4326)
freshwater_eco<-read_sf("G:/Research data/Other groups/R Shiny app for extracting freshwater ecoregions/Final_app/data/Freshwater_Ecoregions.shp")
freshwater_eco<-st_transform(freshwater_eco,4326)
data_path<-"G:/Research data/Other groups/R shiny app for Indian Ecoregions/sample_points3.csv"
grep("*[lL]on",colnames(loc))
loc<-read.csv(data_path)
grep("*[lL]on",colnames(loc))
grepl("*[lL]on",colnames(loc))
loc[,grepl("*[lL]on",colnames(loc))]
tab1 = SpatialPointsDataFrame(coords = loc[,c(grepl("*[lL]on",colnames(loc)),grepl("*[lL]at",colnames(loc)))],
data = loc,
proj4string = CRS("+proj=longlat +datum=WGS84"))%>%
st_as_sf(.)%>%
st_intersection(freshwater_eco,.)%>%
data.frame(.)
loc[,c(grepl("*[lL]on",colnames(loc)),grepl("*[lL]at",colnames(loc)))]
loc[,grepl("*[lL]on",colnames(loc))]
loc[,c(grepl("*[lL]on",colnames(loc)),grepl("*[lL]at",colnames(loc)))]
loc[,c(grepl("*[lL]on",colnames(loc))]
loc[,c(grepl("*[lL]on",colnames(loc))]
grepl("*[lL]on",colnames(loc))
grepl("*[lL]on*",colnames(loc))
c(grepl("*[lL]on*",colnames(loc)),grepl("*[lL]at*",colnames(loc)))
coordinates<-loc[,c(grep('^[Ll]on*', colnames(loc)),
grep('^[Ll]at*', colnames(loc)))]
coordinates
freshwater_eco<-read_sf("G:/Research data/Other groups/R Shiny app for extracting freshwater ecoregions/Final_app/data/Freshwater_Ecoregions.shp")
freshwater_eco<-st_transform(freshwater_eco,4326)
data_path<-"G:/Research data/Other groups/R shiny app for Indian Ecoregions/sample_points3.csv"
loc<-read.csv(data_path)
loc
tab1 = SpatialPointsDataFrame(coords = loc[,c(grep('^[Ll]on.*e$', colnames(loc)),
grep('^[Ll]at.*e$', colnames(loc)))],
data = loc,
proj4string = CRS("+proj=longlat +datum=WGS84"))%>%
st_as_sf(.)%>%
st_intersection(freshwater_eco,.)%>%
data.frame(.)
sf_use_s2(FALSE)
tab1 = SpatialPointsDataFrame(coords = loc[,c(grep('^[Ll]on.*e$', colnames(loc)),
grep('^[Ll]at.*e$', colnames(loc)))],
data = loc,
proj4string = CRS("+proj=longlat +datum=WGS84"))%>%
st_as_sf(.)%>%
st_intersection(freshwater_eco,.)%>%
data.frame(.)
tab1 = SpatialPointsDataFrame(coords = loc[,c(grep('^[Ll]on.*e$', colnames(loc)),
grep('^[Ll]at.*e$', colnames(loc)))],
data = loc,
proj4string = CRS("+proj=longlat +datum=WGS84"))%>%
st_as_sf(.)%>%
st_intersection(freshwater_eco,.)%>%
data.frame(.)%>%
dplyr::select(ECOREGION,
MHT_TXT,
Longitude,
Latitude)%>%
dplyr::rename("Ecoregion"="ECOREGION",
"Subregion"="MHT_TXT")
tab1 = SpatialPointsDataFrame(coords = loc[,c(grep('^[Ll]on.*e$', colnames(loc)),
grep('^[Ll]at.*e$', colnames(loc)))],
data = loc,
proj4string = CRS("+proj=longlat +datum=WGS84"))%>%
st_as_sf(.)%>%
st_intersection(freshwater_eco,.)%>%
data.frame(.)%>%
dplyr::select(ECOREGION,
MHT_TXT,
Longitude,
Latitude)%>%
dplyr::rename("Ecoregion"="ECOREGION",
"Subregion"="MHT_TXT")
tab1
tab1 = SpatialPointsDataFrame(coords = spatial_data[,c("Longitude","Latitude")],
data = spatial_data,
proj4string = CRS("+proj=longlat +datum=WGS84"))%>%
st_as_sf(.)%>%
st_intersection(freshwater_eco,.)%>%
data.frame(.)%>%
dplyr::select(ECOREGION,
MHT_TXT,
Locality,
Longitude,
Latitude)%>%
dplyr::rename("Ecoregion"="ECOREGION",
"Subregion"="MHT_TXT")
tab1 = SpatialPointsDataFrame(coords = loc[,c(grep('^[Ll]on.*e$', colnames(loc)),
grep('^[Ll]at.*e$', colnames(loc)))],
data = loc,
proj4string = CRS("+proj=longlat +datum=WGS84"))%>%
st_as_sf(.)%>%
st_intersection(freshwater_eco,.)%>%
data.frame(.)%>%
dplyr::select(ECOREGION,
MHT_TXT,
Locality,
Longitude,
Latitude)%>%
dplyr::rename("Ecoregion"="ECOREGION",
"Subregion"="MHT_TXT")
tab1
runApp()
freshwater_eco<-read_sf("G:/Research data/Other groups/R Shiny app for extracting freshwater ecoregions/Final_app/data/Freshwater_Ecoregions.shp")
freshwater_eco<-st_transform(freshwater_eco,4326)
data_path<-"G:/Research data/Other groups/R shiny app for Indian Ecoregions/sample_points3.csv"
loc<-read.csv(data_path)
tab1 = SpatialPointsDataFrame(coords = loc[,c(grep('^[Ll]on.*', colnames(loc)),
grep('^[Ll]at.*', colnames(loc)))],
data = loc,
proj4string = CRS("+proj=longlat +datum=WGS84"))%>%
st_as_sf(.)%>%
st_intersection(freshwater_eco,.)%>%
data.frame(.)%>%
dplyr::select(ECOREGION,
MHT_TXT,
matches("[lL]oca.*"),
Longitude,
Latitude)%>%
dplyr::rename("Ecoregion"="ECOREGION",
"Subregion"="MHT_TXT")
tab1
freshwater_eco<-read_sf("G:/Research data/Other groups/R Shiny app for extracting freshwater ecoregions/Final_app/data/Freshwater_Ecoregions.shp")
freshwater_eco<-st_transform(freshwater_eco,4326)
data_path<-"G:/Research data/Other groups/R shiny app for Indian Ecoregions/sample_points3.csv"
loc<-read.csv(data_path)
tab1 = SpatialPointsDataFrame(coords = loc[,c(grep('^[Ll]on.*', colnames(loc)),
grep('^[Ll]at.*', colnames(loc)))],
data = loc,
proj4string = CRS("+proj=longlat +datum=WGS84"))%>%
st_as_sf(.)%>%
st_intersection(freshwater_eco,.)%>%
data.frame(.)%>%
dplyr::select(ECOREGION,
MHT_TXT,
matches("[lL]oca.*"),
matches("[Ll]on.*"),
matches("[Ll]at.*"))%>%
dplyr::rename("Ecoregion"="ECOREGION",
"Subregion"="MHT_TXT")
tab1
tab1%>%
dplyr::rename_at(starts_with("[lL]oca.*"),"Location")
tab1%>%
dplyr::rename_at(vars(starts_with("[lL]oca.*")),~"Location")
tab1%>%
dplyr::rename_at(1,~"Location")
tab1%>%
dplyr::rename_at(5,~"Location")
tab1%>%
dplyr::rename_at(5,~"Location",3,~"Longitude")
tab1%>%
dplyr::rename_at(5,~"Location",3,~"Longi")
tab1%>%
dplyr::rename_with(5,~"Location")
tab1%>%
dplyr::rename_with(5,"Location")
?rename_with
tab1%>%
dplyr::rename_at(5,"Location")
tab1%>%
dplyr::rename_at(5,~"Location")
?rename_at
tab1%>%
dplyr::rename_at(vars(matches("[lL]oca.*")),~"Location")
tab1%>%
dplyr::rename_at(vars(matches("[lL]oca.*")),~"Locality")%>%
dplyr::rename_at(vars(matches("[Ll]on.*")),~"Longitude")%>%
dplyr::rename_at(vars(matches("[Ll]at.*")),~"Latitude")
tab1%>%
dplyr::rename_at(vars(matches("[lL]oca.*")),~"Local")%>%
dplyr::rename_at(vars(matches("[Ll]on.*")),~"Longi")%>%
dplyr::rename_at(vars(matches("[Ll]at.*")),~"Lati")
tab1 = SpatialPointsDataFrame(coords = loc[,c(grep('^[Ll]on.*', colnames(loc)),
grep('^[Ll]at.*', colnames(loc)))],
data = loc,
proj4string = CRS("+proj=longlat +datum=WGS84"))%>%
st_as_sf(.)%>%
st_intersection(freshwater_eco,.)%>%
data.frame(.)%>%
dplyr::select(ECOREGION,
MHT_TXT,
matches("[lL]oca.*"),
matches("[Ll]on.*"),
matches("[Ll]at.*"))%>%
dplyr::rename("Ecoregion"="ECOREGION",
"Subregion"="MHT_TXT")%>%
dplyr::rename_at(vars(matches("[lL]oca.*")),~"Locality")%>%
dplyr::rename_at(vars(matches("[Ll]on.*")),~"Longitude")%>%
dplyr::rename_at(vars(matches("[Ll]at.*")),~"Latitude")
tab1
runApp()
